(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{433:function(t,e,a){"use strict";a.r(e);var s=a(56),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"真题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#真题"}},[t._v("#")]),t._v(" 真题")]),t._v(" "),a("h2",{attrs:{id:"typescript-的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typescript-的特点"}},[t._v("#")]),t._v(" typescript 的特点")]),t._v(" "),a("ul",[a("li",[t._v("可以在编译期间发现并纠正错误")]),t._v(" "),a("li",[t._v("提高可维护性")]),t._v(" "),a("li",[t._v("提高协同开发的效率")]),t._v(" "),a("li",[t._v("支持强类型、接口、泛型、模块")])]),t._v(" "),a("h2",{attrs:{id:"_1-手写体-使用typescript-实现一个-get-函数来获取它的属性值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-手写体-使用typescript-实现一个-get-函数来获取它的属性值"}},[t._v("#")]),t._v(" 1 手写体：使用TypeScript 实现一个 get 函数来获取它的属性值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const data = { name: 'tom', age: 18, address: 'xxx' }\n")])])]),a("p",[t._v("解答")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const get = <T extends object, K extends keyof T>(obj: T, key: K): T[K] => {\n  return obj[key]\n}\n")])])]),a("h2",{attrs:{id:"_2-ts中的-any-、-unknown-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-ts中的-any-、-unknown-的区别"}},[t._v("#")]),t._v(" 2 ts中的 any 、 unknown 的区别？")]),t._v(" "),a("ul",[a("li",[t._v("any：变量如果是 any 类型，绕过所有类型检查，直接可使用")]),t._v(" "),a("li",[t._v("unknown：变量如果是 unknow 类型，需要判断完是什么类型之后才能使用")])]),t._v(" "),a("h2",{attrs:{id:"_3-有用过ts中的-keyof-吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-有用过ts中的-keyof-吗"}},[t._v("#")]),t._v(" 3 有用过ts中的 keyof 吗？")]),t._v(" "),a("p",[t._v("将一个interface的所有key，汇聚成一个联合类型，可以用来对传入key的限制，比如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("interface Target {\n  name: string,\n  age: number\n}\n\nconst fn = (obj: Target, key: keyof Target) => {}\n\nconst obj: Target = { name: 'sunshine', age: 18 }\n\nfn(obj, name) // 成功\nfn(obj, age) // 成功\nfn(obj, height) // 报错\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);