(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{361:function(s,t,a){s.exports=a.p+"assets/img/hunc.1c5febe4.jpg"},389:function(s,t,a){"use strict";a.r(t);var e=a(45),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[s._v("#")]),s._v(" 缓存")]),s._v(" "),e("h3",{attrs:{id:"优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),e("ul",[e("li",[s._v("1.加快了客户端加载网页的速度")]),s._v(" "),e("li",[s._v("2.减少服务器的负担，提升网站性能")]),s._v(" "),e("li",[s._v("3.减少了不必要的数据传输，节省带宽")])]),s._v(" "),e("h2",{attrs:{id:"一、强缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、强缓存"}},[s._v("#")]),s._v(" 一、强缓存")]),s._v(" "),e("p",[s._v("直接使用本地的缓存，不用跟服务器进行通信")]),s._v(" "),e("h4",{attrs:{id:"相关header字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相关header字段"}},[s._v("#")]),s._v(" 相关header字段")]),s._v(" "),e("blockquote",[e("p",[s._v("expires")])]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("一个未来时间，代表请求有效期，没有过期之前都使用当前请求。\n\neg"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" \nThu "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(" Apr "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2099")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("00")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("00")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GMT")]),s._v("  ，代表 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2099")]),s._v(" 年"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("月"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("日请求过期，在这之前当前请求都有效。\n")])])]),e("blockquote",[e("p",[s._v("cache-control,优先级高于 expires")])]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("value 是一个时间段，请求有效的最大时间段，限制："),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("需要记住请求时间还需要计算是否在这个时间段内 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 服务器与客户端时间必须一致。\n\n因为它是一个时间段，所以意味着，可以设置一些默认值，常见的默认值设置： \n\nno"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("cache：不使用本地缓存。向浏览器发送新鲜度校验请求\n\npubilc：任何情况下都缓存（即使是"),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v("认证的资源）\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v("：只能被终端用户的浏览器缓存，不允许"),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CDN")]),s._v("等中继缓存服务器对其缓存\n\nno"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("store：禁止浏览器缓存数据，也禁止保存至临时文件中，每次都重新请求，多次设置 cache"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("control，优先级最高\n")])])]),e("p",[s._v('max-age表示缓存的时间是315360000秒（10年），public表示可以被浏览器和代理服务器缓存，代理服务器一般可用nginx来做。immutable表示该资源永远不变，但是实际上该资源并不是永远不变，它这么设置的意思是为了让用户在刷新页面的时候不要去请求服务器！啥意思？就是说，如果你只设置了cahe-control:max-age=315360000,public 这属于强缓存，每次用户正常打开这个页面，浏览器会判断缓存是否过期，没有过期就从缓存中读取数据；但是有一些 "聪明" 的用户会点击浏览器左上角的刷新按钮去刷新页面，这时候就算资源没有过期（10年没这么快过），浏览器也会直接去请求服务器，这就是额外的请求消耗了，这时候就相当于是走协商缓存的流程了（下面会讲到）。如果cahe-control:max-age=315360000,public再加个immutable的话，就算用户刷新页面，浏览器也不会发起请求去服务，浏览器会直接从本地磁盘或者内存中读取缓存并返回200状态，看上图的红色框（from memory cache）。这是2015年facebook团队向制定 HTTP 标准的 IETF 工作组提到的建议：他们希望 HTTP 协议能给 Cache-Control 响应头增加一个属性字段表明该资源永不过期，浏览器就没必要再为这些资源发送条件请求了。')]),s._v(" "),e("h4",{attrs:{id:"强缓存总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强缓存总结"}},[s._v("#")]),s._v(" 强缓存总结")]),s._v(" "),e("ul",[e("li",[s._v("1.cache-control: max-age=xxxx，public\n客户端和代理服务器都可以缓存该资源；\n客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，如果用户做了刷新操作，就向服务器发起http请求")]),s._v(" "),e("li",[s._v("2.cache-control: max-age=xxxx，private\n只让客户端可以缓存该资源；代理服务器不缓存\n客户端在xxx秒内直接读取缓存,statu code:200")]),s._v(" "),e("li",[s._v("3.cache-control: max-age=xxxx，immutable\n客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，即使用户做了刷新操作，也不向服务器发起http请求")]),s._v(" "),e("li",[s._v("4.cache-control: no-cache\n跳过设置强缓存，但是不妨碍设置协商缓存；一般如果你做了强缓存，只有在强缓存失效了才走协商缓存的，设置了no-cache就不会走强缓存了，每次请求都回询问服务端。")]),s._v(" "),e("li",[s._v("5.cache-control: no-store\n不缓存，这个会让客户端、服务器都不缓存，也就没有所谓的强缓存、协商缓存了。")])]),s._v(" "),e("h2",{attrs:{id:"二、协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、协商缓存"}},[s._v("#")]),s._v(" 二、协商缓存")]),s._v(" "),e("p",[s._v("将资源一些相关信息返回服务器，让服务器判断浏览器是否能直接使用本地缓存，整个过程至少与服务器通信一次")]),s._v(" "),e("h4",{attrs:{id:"相关header字段-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相关header字段-2"}},[s._v("#")]),s._v(" 相关header字段")]),s._v(" "),e("p",[s._v("Last-Modified/If-Modified-Since（两个都是时间格式字符串）")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("过程\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 浏览器第一次发请求，服务器在返回的 respone 的 header 加上 Last"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Modified，表示资源的最后修改时间\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 再次请求资源，在 requset 的 header 加上 If"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Modified"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Since ，值就是上一次请求返回的 Last"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Modified 值\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 服务器根据请求传过来的值判断资源是否有变化，没有则返回 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("304")]),s._v("，有变化就正常返回资源内容，更新 Last"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Modified 的值\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("304")]),s._v(" 从缓存加载资源，否则直接从服务器加载资源\n")])])]),e("p",[s._v("Etag/If-None-Match（标识符字符串）")]),s._v(" "),e("blockquote",[e("p",[s._v("Etag/If-None-Match（标识符字符串）\n与 Last-Modified/If-Modified-Since 不同的是，返回 304 时，ETag 还是会重新生成返回至浏览器,Etag的优先级高于Last-Modified")])]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// response header")]),s._v("\netag"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'5c20abbd-e2e8'")]),s._v("\nlast"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("modified"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Mon"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v(" Dec "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2018")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("09")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("49")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("49")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GMT")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// request header 变为")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("none"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("matched"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'5c20abbd-e2e8'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("modified"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("since"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Mon"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v(" Dec "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2018")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("09")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("49")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("49")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GMT")]),s._v("\n")])])]),e("h4",{attrs:{id:"为什么要有etag"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要有etag"}},[s._v("#")]),s._v(" 为什么要有etag？")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("一些文件也许会周期性的更改，但是他的内容并不改变")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("仅仅改变的修改时间"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，这个时候我们并不希望客户端认为这个文件被修改了，而重新"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),s._v("；\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("某些文件修改非常频繁，比如在秒以下的时间内进行修改，")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("比方说"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("s内修改了"),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("N")]),s._v("次"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("modified"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("since能检查到的粒度是秒级的，这种修改无法判断")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("或者说"),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UNIX")]),s._v("记录"),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MTIME")]),s._v("只能精确到秒"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("；\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("某些服务器不能精确的得到文件的最后修改时间\n")])])]),e("h4",{attrs:{id:"为什么协商缓存有两个属性一起出现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么协商缓存有两个属性一起出现"}},[s._v("#")]),s._v(" 为什么协商缓存有两个属性一起出现?")]),s._v(" "),e("p",[s._v("协商缓存是浏览器判断资源是否可用，所以需要两个标识，第一个是第一次请求的响应头带上某个字段（Last-Modified或者Etag），第二个则是后续请求带上的对应请求字段（If-Modified-Since或者If-None-Match），两个标识一起出现才有意义，单独则没有什么效果。")]),s._v(" "),e("h4",{attrs:{id:"怎么设置强缓存与协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#怎么设置强缓存与协商缓存"}},[s._v("#")]),s._v(" 怎么设置强缓存与协商缓存")]),s._v(" "),e("ul",[e("li",[s._v("1.后端服务器如nodejs:")])]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("setHeader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'max-age'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3600 public'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nres"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("setHeader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("etag"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'5c20abbd-e2e8'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nres"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("setHeader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'last-modified'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Mon"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v(" Dec "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2018")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("09")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("49")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("49")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GMT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),e("ul",[e("li",[s._v("2.nginx配置\n"),e("img",{attrs:{src:a(361),alt:"原型"}})])]),s._v(" "),e("h4",{attrs:{id:"怎么去用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#怎么去用"}},[s._v("#")]),s._v(" 怎么去用？")]),s._v(" "),e("p",[s._v("举个例子，像目前用vue-cli打包后生成的单页文件是有一个html，与及一堆js css img资源，怎么去设置这些文件呢，核心需求是")]),s._v(" "),e("p",[s._v("1.要有缓存，毋庸置疑\n2.当发新包的时候，要避免加载老的缓存资源")]),s._v(" "),e("p",[s._v("我的做法是：\nindex.html文件采用协商缓存，理由就是要用户每次请求index.html不拿浏览器缓存，直接请求服务器，这样就保证资源更新了，用户能马上访问到新资源，如果服务端返回304，这时候再拿浏览器的缓存的index.html，切记不要设置强缓存！！！")])])}),[],!1,null,null,null);t.default=n.exports}}]);