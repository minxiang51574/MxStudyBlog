(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{450:function(e,t,_){"use strict";_.r(t);var v=_(56),a=Object(v.a)({},(function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"vite"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vite"}},[e._v("#")]),e._v(" Vite")]),e._v(" "),_("p",[e._v("Vite是新一代的前端构建工具，在尤雨溪开发Vue3.0的时候诞生。类似于Webpack+ Webpack-dev-server。其主要利用浏览器ESM特性导入组织代码，在服务器端按需编译返回，完全跳过了打包这个概念，服务器随起随用。生产中利用Rollup作为打包工具，号称下一代的前端构建工具")]),e._v(" "),_("h2",{attrs:{id:"_1、优缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、优缺点"}},[e._v("#")]),e._v(" 1、优缺点")]),e._v(" "),_("p",[e._v("优点")]),e._v(" "),_("ul",[_("li",[e._v("快速的冷启动: No Bundle + esbuild 预构建")]),e._v(" "),_("li",[e._v("即时的模块热更新: 基于ESM的HMR，同时利用浏览器缓存策略提升速度")]),e._v(" "),_("li",[e._v("真正的按需加载: 利用浏览器ESM支持，实现真正的按需加载")])]),e._v(" "),_("p",[e._v("缺点")]),e._v(" "),_("ul",[_("li",[e._v("生态：目前Vite的生态不如Webapck")]),e._v(" "),_("li",[e._v("生产环境由于esbuild对css和代码分割不友好使用Rollup进行打包")])]),e._v(" "),_("h2",{attrs:{id:"_2、esm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2、esm"}},[e._v("#")]),e._v(" 2、ESM")]),e._v(" "),_("p",[e._v("ESM的执行可以分为三个步骤：")]),e._v(" "),_("ul",[_("li",[e._v("构建: 确定从哪里下载该模块文件、下载并将所有的文件解析为模块记录")]),e._v(" "),_("li",[e._v("实例化: 将模块记录转换为一个模块实例，为所有的模块分配内存空间，依照导出、导入语句把模块指向对应的内存地址。")]),e._v(" "),_("li",[e._v("运行：运行代码，将内存空间填充")])]),e._v(" "),_("h2",{attrs:{id:"_3、rollup"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3、rollup"}},[e._v("#")]),e._v(" 3、Rollup")]),e._v(" "),_("p",[e._v("在生产环境下，Vite使用Rollup来进行打包")]),e._v(" "),_("blockquote",[_("p",[e._v("Rollup是基于ESM的JavaScript打包工具。相比于其他打包工具如Webpack，他总是能打出更小、更快的包。因为 Rollup 基于 ESM 模块，比 Webpack 和 Browserify 使用的 CommonJS模块机制更高效。Rollup的亮点在于同一个地方，一次性加载。能针对源码进行 Tree Shaking(去除那些已被定义但没被使用的代码)，以及 Scope Hoisting 以减小输出文件大小提升运行性能。")])]),e._v(" "),_("p",[e._v("Rollup分为build（构建）阶段和output generate（输出生成）阶段。主要过程如下：")]),e._v(" "),_("ul",[_("li",[e._v("获取入口文件的内容，包装成module，生成抽象语法树")]),e._v(" "),_("li",[e._v("对入口文件抽象语法树进行依赖解析")]),e._v(" "),_("li",[e._v("生成最终代码")]),e._v(" "),_("li",[e._v("写入目标文件")])]),e._v(" "),_("h2",{attrs:{id:"_4、-vs-webapck"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4、-vs-webapck"}},[e._v("#")]),e._v(" 4、 VS Webapck")]),e._v(" "),_("ul",[_("li",[e._v("Webpack在启动时，会先构建项目模块的依赖图，如果在项目中的某个地方改动了代码，Webpack则会对相关的依赖重新打包，随着项目的增大，其打包速度也会下降。")]),e._v(" "),_("li",[e._v("Vite相比于Webpack而言，没有打包的过程，而是直接启动了一个开发服务器devServer。Vite劫持浏览器的HTTP请求，在后端进行相应的处理将项目中使用的文件通过简单的分解与整合，然后再返回给浏览器(整个过程没有对文件进行打包编译)")])]),e._v(" "),_("h2",{attrs:{id:"_5、-热更新"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5、-热更新"}},[e._v("#")]),e._v(" 5、 热更新")])])}),[],!1,null,null,null);t.default=a.exports}}]);